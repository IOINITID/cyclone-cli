import axios from 'axios';
import { Storage, storageService } from './storage.service';
import inquirer from 'inquirer';
import { saveCity, saveToken } from '../index';
import { createSpinner } from 'nanospinner';

class APIService {
  public async getWeather() {
    let token = process.env.TOKEN ?? (await storageService.get(Storage.Token));
    let city = process.env.CITY ?? (await storageService.get(Storage.City));

    if (!token) {
      const prompt = inquirer.createPromptModule();

      const inputToken = await prompt({
        type: 'input',
        name: 'token',
        message: '–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á API –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å —Å–µ—Ä–≤–∏—Å–∞ https://openweathermap.org:',
      });

      if (inputToken.token) {
        await saveToken(inputToken.token);
        token = await storageService.get(Storage.Token);
      } else {
        throw new Error('–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á API, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É -t, --token [API_KEY]');
      }
    }

    if (!city) {
      const prompt = inquirer.createPromptModule();

      const inputCity = await prompt({
        type: 'input',
        name: 'city',
        message: '–î–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥:',
      });

      if (inputCity.city) {
        await saveCity(inputCity.city);
        city = await storageService.get(Storage.City);
      } else {
        throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É -c, --city [CITY]');
      }
    }

    const spinner = createSpinner('–ó–∞–≥—Ä—É–∑–∫–∞...').start();

    const { data } = await axios.get('https://api.openweathermap.org/data/2.5/weather', {
      params: {
        q: city,
        appid: token,
        lang: 'ru',
        units: 'metric',
      },
    });

    spinner.success();

    return data;
  }

  public getWeatherIcon(icon: string) {
    switch (icon.slice(0, -1)) {
      case '01':
        return '‚òÄÔ∏è';
      case '02':
        return 'üå§';
      case '03':
        return '‚òÅÔ∏è';
      case '04':
        return '‚òÅÔ∏è';
      case '09':
        return 'üåß';
      case '10':
        return 'üå¶';
      case '11':
        return 'üå©';
      case '13':
        return '‚ùÑÔ∏è';
      case '50':
        return 'üå´';
      default:
        return;
    }
  }
}

export const apiService = new APIService();
